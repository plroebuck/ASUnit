###
### ASUnit Workflow
###

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  runs-on: macos-latest

  env:
    ASUNIT_LIB_DIR: "~/Library/Script\ Libraries/com.lifepillar"
    ASUNIT_TEXT: "ASUnit.applescript"
    ASUNIT_BNDL: "ASUnit.scptd"
    UNIT_TEST: "Test\ ASUnit.applescript"
    DOC_DIR: "./doc"
    API_DOC_DIR: "./doc/api"
    
  simple_test:
    steps:
      - name: Runs a test
        run: echo "Hello, world!"

  gestalt:
    steps:
      - name: Display system information
        run: |
          echo "::group::System Info"
          sw_vers
          echo "Architecture: $( uname -p )"
          echo "OS: $( uname -sr )"
          echo "CWD: $( pwd )"
          echo "Environment:"; echo
          env | sort
          echo "::endgroup::"
          
  setup:
    steps:
      - name: Create ASUnit library directory
        run: |
          echo "::group::Create ASUnit library directory"
          echo "CWD: $( pwd )"
          mkdir -p "${{env.ASUNIT_LIB_DIR}}"
          echo "::endgroup::"

  build:
    needs: [gestalt, setup]
    steps:
      - name: Build ASUnit library
      - uses: actions/checkout@v4
        working-directory: ./ASUnit
        run: |
          echo "::group::Compiling ASUnit"
          echo "CWD: $( pwd )"
          result=$(osacompile -o ${{env.ASUNIT_BNDL}} -x ${{env.ASUNIT_TEXT}})
          if [[ $? -ne 0 ]]; then
            echo "::error file=${{env.ASUNIT_TEXT}}, title=FUBAR::${result}"
          fi
          echo "::endgroup::"

  install:
    needs: build
    steps:
      - name: Install ASUnit library
        working-directory: ./ASUnit
        run: |
          echo "::group::Installing ASUnit"
          echo "CWD: $( pwd )"
          mv ${{env.ASUNIT_BNDL}} "${{env.ASUNIT_LIB_DIR}}"
          echo "::endgroup::"

  test:
    needs: install
    steps:
      - name: Test ASUnit framework with test program
        working-directory: ./ASUnit/test
        run: |
          echo "::group::Testing ASUnit framework with test program"
          echo "CWD: $( pwd )"
          result=$(osascript "${{env.UNIT_TEST}}")
          if [[ $? -ne 0 ]]; then
            echo "::error file=${{env.UNIT_TEST}}, title=FUBAR::${result}"
          fi
          echo "::endgroup::"

  document:
    needs: test
    env:
      README_MD: "README.md"
      README_HTML: "README.html"
      OLD_README_MD: "OldManual.md"
      OLD_README_HTML: "OldManual.html"

    steps:
      - name: Convert markdown files to HTML
        uses: pandoc/actions/setup
        working-directory: ./ASUnit
        run: |
          echo "::group::Converting markdown files to HTML for documentation"
          mkdir -p "${{env.DOC_DIR}}"
          pandoc --standalone -o "${{env.OLD_README_HTML}}" "${{env.OLD_README_MD}}"
          pandoc --standalone -o "${{env.README_HTML}}" "${{env.README_MD}}"
          echo "::endgroup::"
      
  document_api:
    needs: test
    steps:
      - name: Create API documentation
        working-directory: ./ASUnit
        run: |
          echo "::group::Creating API documentation"
          rm -rf "${{env.API_DOC_DIR}}"
          mkdir -p "${{env.API_DOC_DIR}}"
          env LANG=en_US.UTF-8 headerdoc2html -q -o ${{env.API_DOC_DIR}} "${{env.ASUNIT_TEXT}}"
          env LANG=en_US.UTF-8 gatherheaderdoc ${{env.API_DOC_DIR}} 
          echo "::endgroup::"

#  save_documentation:
#    needs: [document, document_api]
#    - uses: actions/upload-artifact@v4
#        with:
#          name: "${{env.DOC_DIR}}"
#          path: "${{env.DOC_DIR}}"
