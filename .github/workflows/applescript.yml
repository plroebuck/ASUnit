###
### ASUnit Workflow
###

name: CI

## Controls when the workflow will run
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  ## Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

## Global environment
env:
  API_DOC_DIR: "./doc/api"
  ASUNIT_BNDL: "ASUnit.scptd"
  ASUNIT_LIB_DIR: "~/Library/Script\ Libraries/com.lifepillar"
  ASUNIT_TEXT: "ASUnit.applescript"
  DOC_DIR: "./doc"
  UNIT_TEST: "Test\ ASUnit.applescript"

## Default values
defaults:
  run:
    shell: bash
    working_directory: ./ASUnit

## Workflow [jobs can be run sequentially or in parallel]
jobs:

  simple_test:
    runs-on: macos-latest
    steps:
      - name: Runs a test
        working-directory: ~
        run: echo "Hello, world!"

  gestalt:
    runs-on: macos-latest
    steps:
      - name: Display system information
        working-directory: ~
        run: |
          echo "::group::System Info"
          sw_vers
          echo "Architecture: $( uname -p )"
          echo "OS: $( uname -sr )"
          echo "CWD: $( pwd )"
          echo "Environment:"
          env | sort | sed 's/^/  /'
          echo "::endgroup::"
          
  setup:
    runs-on: macos-latest
    steps:
      - name: Create ASUnit library directory
        working-directory: ~
        run: |
          echo "::group::Create ASUnit library directory"
          echo "CWD: $( pwd )"
          mkdir -p "${{env.ASUNIT_LIB_DIR}}"
          echo "::endgroup::"

  build:
    needs: [gestalt, setup]
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        working_directory: ${{env.TMPDIR}}
        uses: actions/checkout@v4
      - name: Build ASUnit library
        run: |
          echo "::group::Compiling ASUnit"
          echo "CWD: $( pwd )"
          result=$( osacompile -o ${{env.ASUNIT_BNDL}} -x ${{env.ASUNIT_TEXT}} )
          if [[ $? -ne 0 ]]; then
            echo "::error file=${{env.ASUNIT_TEXT}}, title=FUBAR::${result}"
          fi
          echo "::endgroup::"

  install:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Install ASUnit library
        run: |
          echo "::group::Installing ASUnit"
          echo "CWD: $( pwd )"
          mv ${{env.ASUNIT_BNDL}} "${{env.ASUNIT_LIB_DIR}}"
          echo "::endgroup::"

  test:
    needs: install
    runs-on: macos-latest
    steps:
      - name: Test ASUnit framework with test program
        working-directory: ./ASUnit/test
        run: |
          echo "::group::Testing ASUnit framework with test program"
          echo "CWD: $( pwd )"
          result=$( osascript "${{env.UNIT_TEST}}" )
          if [[ $? -ne 0 ]]; then
            echo "::error file=${{env.UNIT_TEST}}, title=FUBAR::${result}"
          fi
          echo "::endgroup::"

  document:
    needs: test
    if: true
    runs-on: macos-latest
    env:
      README_MD: "README.md"
      README_HTML: "README.html"
      OLD_README_MD: "OldManual.md"
      OLD_README_HTML: "OldManual.html"
    steps:
      - name: Setup for creating documentation
        run: |
          if [[ -d "${{env.DOC_DIR}}" ]]; then
            rm -rf "${{env.DOC_DIR}}/*.html"
          else
            mkdir -p "${{env.DOC_DIR}}"
          fi
      - name: Convert markdown files to HTML
        run: |
          echo "::group::Converting markdown files to HTML for documentation"
      - uses: docker://pandoc/core:3.5
          with:
            args: --standalone --output="${{env.README_HTML}}" "${{env.README_MD}}"
      - name: Inspect README results
        run: |
          if [[ -s "${{env.README_HTML}}" ]]; then
            echo "::error file=${{env.README_HTML}}, title=FUBAR::zero length file"
          fi
      - uses: docker://pandoc/core:3.5
          with:
            args: --standalone --output="${{env.OLD_README_HTML}}" "${{env.OLD_README_MD}}"
      - name: Inspect original README results
        run: |
          if [[ -s "${{env.OLD_README_HTML}}" ]]; then
            echo "::error file=${{env.OLD_README_HTML}}, title=FUBAR::zero length file"
          fi
          echo "::endgroup::"

  document_api:
    needs: test
    runs-on: macos-latest
    steps:
      - name: Setup for creating documentation
        run: |
          if [[ -d "${{env.API_DOC_DIR}}" ]]; then
            rm -rf "${{env.API_DOC_DIR}}/*"
          else
            mkdir -p "${{env.API_DOC_DIR}}"
          fi
      - name: Create API documentation
        run: |
          echo "::group::Creating API documentation"
          result=$( headerdoc2html -q -o ${{env.API_DOC_DIR}} "${{env.ASUNIT_TEXT}}" )
          if [[ $? -ne 0 ]]; then
            echo "::error file=${{env.ASUNIT_TEXT}}, title=FUBAR::${result}"
          fi
          result=$( gatherheaderdoc ${{env.API_DOC_DIR}} )
          if [[ $? -ne 0 ]]; then
            echo "::error title=FUBAR::${result}"
          fi
          echo "::endgroup::"

  save_documentation:
    needs: [document, document_api]
    runs-on: macos-latest
    - name: Save documentation
    - uses: actions/upload-artifact@v4
        with:
          name: "${{env.DOC_DIR}}"
          path: "${{env.DOC_DIR}}"
