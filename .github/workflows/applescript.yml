###
### ASUnit Workflow
###
### @abstract Handles continuous integration for ASUnit, the AppleScript test framework.
### @author: (plroebuck)
###

name: ASUnit_CI

## Controls when the workflow will run
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  ## Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

## Global Environment
env:
  API_DOC_DIR: "./doc/api"
  ARTIFACT_DIR: "${GITHUB_WORKSPACE}/doc/"
  ASSETS_DIR: "./assets"
  ASUNIT_BNDL: "ASUnit.scptd"
  ASUNIT_LIB_DIR: "${HOME}/Library/Script\ Libraries/com.lifepillar"
  ASUNIT_TEXT: "ASUnit.applescript"
  CSS_DIR: "./doc/styles"
  DOC_DIR: "./doc"
  HEADERDOC_LOG: "HeaderDoc.log"
  OLD_README_HTML: "OldManual.html"
  OLD_README_MD: "OldManual.md"
  README_HTML: "README.html"
  README_MD: "README.md"
  STYLESHEET: "github-markdown.css"
  UNIT_TEST: "Test\ ASUnit.applescript"
  VAR_LOG_DIR: "./var/log"

## Default Values
defaults:
  run:
    shell: bash

## Workflow runs are made up of one or more jobs that can either
## run sequentially or in parallel
jobs:
  env-debug:
    name: Debug Environment
    runs-on: macos-latest
    steps:
      - name: Environment
        run: |
          env | sort
      - name: Round 2
        env:
          SUPER_SECRET: ${{ secrets.SuperSecret }}
          FUBAR: true
        run: |
          env | sort
      - name: Round 3 - Removed?
        run: |
          env | ( grep FUBAR || echo "Clean" )

  machine_details:
    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Display Machine Details
        uses: plroebuck/machinedetails-action@v0.2.3-alpha

  orig_machine_details:
    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    if: false
    steps:
      - name: MachineDetails
        id: vars
        run: |
          ## Basic system information retrieved, first 4 lines deleted, any blank lines,
          ## left-whitespace trimmed, then result copied to clipboard
          system_profiler SPHardwareDataType | sed '1,4d' | sed '/./!d' | sed 's/^[ \t]*//' | head -n 10 | pbcopy
          #pbpaste    ## Uncomment to see the parsed material
          ## Parse each invidual detail
          modelname="$( pbpaste | awk -F':' '/Model Name/ { print substr($2, 2) }' )"
          ncores="$( pbpaste | awk -F':' '/Total Number of Cores/ { print sprintf("%d", $2) }' )"
          memory="$( pbpaste | awk -F':' '/Memory/ { print substr($2, 2) }' )"
          arch="$( uname -p )"
          ## Naturally, some are different between architectures
          if [[ "${arch}" == "i386" ]]; then
            chip="Intel Core"
            cpu="$( pbpaste | awk -F':' '/Processor Name/ { print substr($2, 2) }' )"
            cpuspeed="$( pbpaste | awk -F':' '/Processor Speed/ { print substr($2, 2) }' )"
            ncpus="$( pbpaste | awk -F':' '/Number of Processors/ { print sprintf("%d", $2) }' )"
          elif [[ "${arch}" == "arm" ]]; then
            chip="Apple M1 Virtual"
            chip="$( pbpaste | awk -F':' '/Chip/ { print substr($2, 2) }' )"
            cpu="N/A"
            cpuspeed="N/A"
            ncpus="N/A"
          fi
          ## Now export all the hardware-related variables
          echo "modelname=$( echo ${modelname} )" >> $GITHUB_OUTPUT
          echo "chip=$( echo ${chip} )" >> $GITHUB_OUTPUT
          echo "cpu=$( echo ${cpu} )" >> $GITHUB_OUTPUT
          echo "cpuspeed=$( echo ${cpuspeed} )" >> $GITHUB_OUTPUT
          echo "ncpus=$( echo ${ncpus} )" >> $GITHUB_OUTPUT
          echo "ncores=$( echo ${ncores} )" >> $GITHUB_OUTPUT
          echo "arch=$( uname -p )" >> $GITHUB_OUTPUT
          echo "isa=$( uname -m )" >> $GITHUB_OUTPUT
          echo "memory=$( echo ${memory} )" >> $GITHUB_OUTPUT
          ## Now export all the software-related variables
          echo "prodname=$( sw_vers -productName )" >> $GITHUB_OUTPUT
          echo "prodvers=$( sw_vers -productVersion )" >> $GITHUB_OUTPUT
          echo "build=$( sw_vers -buildVersion )" >> $GITHUB_OUTPUT
          echo "os=$( uname -sr )" >> $GITHUB_OUTPUT
          echo "applescript=$( osascript -e 'version of AppleScript' )" >> $GITHUB_OUTPUT

      - name: Display Hardware Information
        run: |
          echo "::group::Hardware Info"
          ## Now display everything hardware-related from the "MachineDetails" step
          arch="${{ steps.vars.outputs.arch }}"
          width=18
          printf "%-${width}s %s\n"  "ModelName:"       "${{ steps.vars.outputs.modelname }}"
          if [[ "${arch}" == "i386" ]]; then
            printf "%-${width}s %s\n"  "Chip:"           "${{ steps.vars.outputs.chip }}"
            printf "%-${width}s %s\n"  "CPU:"            "${{ steps.vars.outputs.cpu }}"
            printf "%-${width}s %s\n"  "Architecture:"    "${{ steps.vars.outputs.arch }}"
            printf "%-${width}s %s\n"  "InstructionSet:"  "${{ steps.vars.outputs.isa }}"
            printf "%-${width}s %s\n"  "ProcessorSpeed:"  "${{ steps.vars.outputs.cpuspeed}}"
            printf "%-${width}s %s\n"  "#CPUs:"           "${{ steps.vars.outputs.ncpus}}"
          elif [[ "${arch}" == "arm" ]]; then
            printf "%-${width}s %s\n"  "Chip:"           "${{ steps.vars.outputs.chip }}"
            printf "%-${width}s %s\n"  "Architecture:"    "${{ steps.vars.outputs.arch }}"
            printf "%-${width}s %s\n"  "InstructionSet:"  "${{ steps.vars.outputs.isa }}"
          fi
          printf "%-${width}s %s\n"  "#Cores:"          "${{ steps.vars.outputs.ncores}}"
          printf "%-${width}s %s\n"  "Memory:"          "${{ steps.vars.outputs.memory }}"
          echo "::endgroup::"
          
      - name: Display Software Information
        run: |
          echo "::group::Software Info"
          ## Now display everything software-related from the "MachineDetails" step
          width=18
          printf "%-${width}s %s\n"  "ProductName:"     "${{ steps.vars.outputs.prodname }}"
          printf "%-${width}s %s\n"  "ProductVersion:"  "${{ steps.vars.outputs.prodvers }}"
          printf "%-${width}s %s\n"  "Build:"           "${{ steps.vars.outputs.build }}"
          printf "%-${width}s %s\n"  "OperatingSystem:" "${{ steps.vars.outputs.os }}"
          printf "%-${width}s %s\n"  "AppleScript:"     "${{ steps.vars.outputs.applescript }}"
          echo "::endgroup::"

      - name: Display Environment
        run: |
          echo "::group::Environment"
          ## Display the environment variables
          env | sort | sed 's/^/  /'
          echo "::endgroup::"

  just_a_job_to_do:
    strategy:
      matrix:
        os: [macos-14]
    #    os: [macos-13, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Create ASUnit Library Directory
        run: |
          echo "::group::Create ASUnit library directory"
          mkdir -p "${{ env.ASUNIT_LIB_DIR }}"
          ls -al "${{ env.ASUNIT_LIB_DIR }}"
          echo "::endgroup::"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Display the Checked-out Directory's Contents
        run: |
          ## Display The Directory Contents
          echo "::group::CWD ($GITHUB_WORKSPACE)"
          pwd
          ls -al | sed 's/^/  /'
          echo "::endgroup::"

      - name: Build Log Directory
        run: |
          echo "::group::Building log directory"
          pwd
          mkdir -p "${{ env.VAR_LOG_DIR }}"
          ls -al | sed 's/^/  /'
          cd var
          pwd
          ls -al | sed 's/^/  /'      
          echo "::endgroup::"

      - name: Build ASUnit Library
        env:
          ASUNIT_BNDL: "ASUnit.scptd"
          ASUNIT_TEXT: "ASUnit.applescript"
        run: |
          echo "::group::Compiling ASUnit"
          pwd
          result=$( osacompile -o $ASUNIT_BNDL -x $ASUNIT_TEXT )
          if [[ $? -ne 0 ]]; then
            echo "::error file=$ASUNIT_TEXT, title=FUBAR::${result}"
          fi
          ls -al | sed 's/^/  /'
          echo "::endgroup::"

      - name: Install ASUnit Library
        env:
          ASUNIT_BNDL: "ASUnit.scptd"
        run: |
          echo "::group::Installing ASUnit"
          pwd
          if ! mv $ASUNIT_BNDL "${{ env.ASUNIT_LIB_DIR }}"; then
            echo "::error file=$ASUNIT_BNDL, title=FUBAR::moving library failed"
          fi
          ls -al "${{ env.ASUNIT_LIB_DIR }}"
          echo "::endgroup::"

      - name: Test ASUnit framework with test program
        working-directory: test
        run: |
          echo "::group::Testing ASUnit framework with test program"
          echo "CWD: $( pwd )"
          result=$(osascript "${{ env.UNIT_TEST }}")
          if [[ $? -ne 0 ]]; then
            echo "::error file=${{ env.UNIT_TEST }}, title=FUBAR::${result}"
          fi
          echo "::endgroup::"

      - name: Setup for creating documentation
        env:
          STYLESHEET_URL: https://gist.githubusercontent.com/fergiemcdowall/9ecbea41f67465b5cfcd3560508eb100/raw/4e79df633dbf163c3543be460f30460ebd5c5b88/github-markdown.css
        run: |
          if [[ ! -d "${{ env.DOC_DIR }}" ]]; then
            mkdir -p "${{ env.DOC_DIR }}"
          fi
          if [[ ! -d "${{ env.CSS_DIR }}" ]]; then
            mkdir -p "${{ env.CSS_DIR }}"
          fi
          if ! curl --silent --output-dir "${{ env.CSS_DIR }}" --output "${{ env.STYLESHEET }}" $STYLESHEET_URL; then
            head -n 20 "${{ env.CSS_DIR }}"/${{ env.STYLESHEET }}    # prove file exists with nonzero length
            echo "\n#title-block-header {\ntext-align: center;\n}\n" >> "${{ env.CSS_DIR }}"/${{ env.STYLESHEET }}
          else
            echo "::error file=${{ env.STYLESHEET }}, title=FUBAR::failed to download"
          fi

      - name: Install Pandoc
        uses: pandoc/actions/setup@v1
        with:
          version: 2.19

      - name: Save values for use in later steps
        id: vars
        run: |
          echo "::group::Setting variables"
          abs_doc_dir="$( cd ${{ env.DOC_DIR }}; pwd )"
          abs_api_doc_dir="$abs_doc_dir/api/"    # mirror API_DOC_DIR
          abs_var_log_dir="${HOME}/var/log/"
          abs_readme_html="$abs_doc_dir/${{ env.README_HTML }}"
          abs_readme_pdf="$abs_doc_dir/${{ env.README_PDF }}"
          abs_old_readme_html="$abs_doc_dir/${{ env.OLD_README_HTML }}"
          abs_var_log_dir="$( cd ${{ env.VAR_LOG_DIR }}; pwd )"
          logfile="${abs_var_log_dir}/${{ env.HEADERDOC_LOG }}"
          readme_when_off="$( git log -1 --pretty="format:%ci" README.md | sed -e 's/ /T/' -e 's/ //' )"
          orig_when_off="$( git log -1 --pretty="format:%ci" OldManual.md | sed -e 's/ /T/' -e 's/ //' )"
          readme_when="$( date -j -f "%FT%T%z" $readme_when_off +"%FT%TZ" )"
          orig_when="$( date -j -f "%FT%T%z" $orig_when_off +"%FT%TZ" )"
          echo "::endgroup::"
          #---
          echo "::group::Saving values to GITHUB_OUTPUT"
          echo "abs_doc_dir=$( echo $abs_doc_dir )" >> $GITHUB_OUTPUT
          echo "abs_api_doc_dir=$( echo $abs_api_doc_dir )" >> $GITHUB_OUTPUT
          echo "abs_readme_html=$( echo $abs_readme_html )" >> $GITHUB_OUTPUT
          echo "abs_old_readme_html=$( echo $abs_old_readme_html )" >> $GITHUB_OUTPUT
          echo "abs_var_log_dir=$( echo $abs_var_log_dir )" >> $GITHUB_OUTPUT
          echo "logfile=$( echo $logfile )" >> $GITHUB_OUTPUT
          echo "readme_when=$( echo $readme_when )" >> $GITHUB_OUTPUT
          echo "orig_when=$( echo $orig_when )" >> $GITHUB_OUTPUT
          echo "::endgroup::"
       
      - name: Convert README.md using Pandoc
        env:
          README_HTML: ${{ steps.vars.outputs.abs_readme_html }}
          REL_STYLESHEET: styles/${{ env.STYLESHEET }}
        run: >-
          pandoc
          --from gfm
          --to html5
          --standalone
          --columns=80
          --metadata title="ASUnit, the AppleScript testing framework"
          --metadata description="User Guide"
          --metadata date="${{ steps.vars.outputs.readme_when }}"
          --request-header="X-Content-Type-Options: nosniff"
          --highlight-style=tango
          --css="$REL_STYLESHEET"
          --output=$README_HTML
          ${{ env.README_MD }}

      - name: Convert OldManual.md using Pandoc
        env:
          ORIG_README_HTML: ${{ steps.vars.outputs.abs_old_readme_html }}
        run: >-
          pandoc
          --from gfm
          --to html
          --standalone 
          --columns=80
          --metadata title="ASUnit's original user guide"
          --metadata date="${{ steps.vars.outputs.orig_when }}"
          --output=$ORIG_README_HTML
          ${{ env.OLD_README_MD }}
  
      - name: Inspect converted documentation
        env:
          ORIG_README_HTML: ${{ steps.vars.outputs.abs_old_readme_html }}
          README_HTML: ${{ steps.vars.outputs.abs_readme_html }}
        run: |
          echo "::group::Inspecting converted markdown documentation"
          pwd
          ls -al
          echo "----"
          cd ${{ steps.vars.outputs.abs_doc_dir }}
          pwd
          ls -al
          ## Say something if README HTML files has no contents
          if [[ -s $README_HTML ]]; then
            head -n 20 $README_HTML        # prove file exists with nonzero length
          else
            if [[ -f $README_HTML ]]; then
              echo "::error file=$README_HTML, title=FUBAR::file does not exist"
            else
              echo "::error file=$README_HTML, title=FUBAR::zero length file"
            fi
          fi
          ## Say something if OLDREADME HTML files has no contents
          if [[ -s $ORIG_README_HTML ]]; then
            head -n 20 $ORIG_README_HTML    # prove file exists with nonzero length
          else
            if [[ -f $ORIG_README_HTML ]]; then
              echo "::error file=$ORIG_README_HTML, title=FUBAR::file does not exist"
            else
              echo "::error file=$ORIG_README_HTML, title=FUBAR::zero length file"
            fi
          fi
          echo "::endgroup::"

      - name: Patch HTML Documentation
        run: |
          readme="${{ env.DOC_DIR }}/${{ env.README_HTML }}"
          readme_pandoc="${TMPDIR}/${{ env.README_HTML }}"
          mv ${readme} ${readme_pandoc}
          sed -e 's^./assets/^../assets/^' ${readme_pandoc} > ${readme}
          h1_center="\n#title-block-header {\n  text-align: center;\n}\n"
          echo "${h1_center}\n" >> "${{ env.CSS_DIR }}"/${{ env.STYLESHEET }}

      - name: Generate API documentation
        env:
          ASUNIT_TEXT: "ASUnit.applescript"
        run: |
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          if [[ ! -d "${api_doc_dir}" ]]; then
            mkdir -p "${api_doc_dir}"
          fi
          pwd
          ls -al
          echo "::group::Converting AppleScript file to API documentation"
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          var_log_dir="${{ steps.vars.outputs.abs_var_log_dir }}"
          ## Log conversion issues, if necessary
          logfile="${{ steps.vars.outputs.logfile }}"
          write_file_header() {
            printf "###\n### CREATE_API_DOC_LOG\n###\n\n"  >> ${logfile}
          }
          write_cmd_header() {
            local cmd=${1}
            printf '#%.0s' {1..78}   >> ${logfile}
            printf "\n"              >> ${logfile}
            printf "## $ ${cmd}\n"   >> ${logfile}
            printf '#%.0s' {1..78}   >> ${logfile}
            printf "\n"              >> ${logfile}
          }
          write_file_header
          write_cmd_header "headerdoc2html -q -o ${api_doc_dir} $ASUNIT_TEXT"
          if ! headerdoc2html -q -o ${api_doc_dir} $ASUNIT_TEXT 2>&1 | tee -a ${logfile}; then
            echo "::error file=$ASUNIT_TEXT, title=FUBAR::problem generating documentation from source comments"
          fi
          printf "\n\n\n\n"                                                        >> ${logfile}
          write_cmd_header "gatherheaderdoc ${api_doc_dir}"
          if ! gatherheaderdoc ${api_doc_dir} 2>&1 | tee -a ${logfile}; then
            echo "::error file=${api_doc_dir}, title=FUBAR::problem processing headerdoc output"
          fi
          printf "\n\n"                                                            >> ${logfile}
          echo "::endgroup::"

      - name: Prettify Documentation
        run: |
          (cd ~; npm install prettier)
          #find doc -name "*.html" -exec npx prettier --write {} \;

      - name: List Documentation Files
        run: |
          doc_dir="${{ steps.vars.outputs.abs_doc_dir }}"
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          cd ${doc_dir}
          pwd
          ls -al
          cd api
          pwd
          ls -al
          cd ASUnit_applescript
          pwd
          ls -al

      - name: Upload Documentation
        env:
          ASSETS_DIR: ./assets/
          DOC_DIR: ./doc/
          VAR_DIR: ./var/
        uses: actions/upload-artifact@v4
        with:
          name: "documentation-${{ matrix.os }}"
          path: |
            $ASSETS_DIR
            $DOC_DIR
            $VAR_DIR
          if-no-files-found: error
          retention-days: 0
          compression-level: 9
          overwrite: true
          
      - name: Where did it go
        run: |
          var_log_dir="${{ steps.vars.outputs.abs_var_log_dir }}"
          doc_dir="${{ steps.vars.outputs.abs_doc_dir }}"
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          artifact_file="${doc_dir}/documentation-${{ matrix.runs-on }}"
          cd ${doc_dir} 
          pwd
          ls -al "${doc_dir}"
          cd ${api_doc_dir} 
          pwd
          ls -al "${api_doc_dir}"
          echo  "inside api dir"
          find ${api_doc_dir} -name "*" -print
          cd ${var_log_dir}/..
          pwd
          ls -al
          cd ${var_log_dir}
          pwd
          ls -al
          echo "::notice file=${artifact_file}. title=DOWNLOAD ME::"
