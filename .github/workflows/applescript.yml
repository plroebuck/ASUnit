###
### ASUnit Workflow
###
### @abstract Handles continuous integration for ASUnit, the AppleScript test framework.
### @author: (plroebuck)
###

name: ASUnit_CI

## Controls when the workflow will run
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  ## Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

## Global Environment
env:
  API_DOC_DIR: "./doc/api"
  ARTIFACT_DIR: "${GITHUB_WORKSPACE}/doc/"
  ASSETS_DIR: "./assets"
  ASUNIT_BNDL: "ASUnit.scptd"
  ASUNIT_LIB_DIR: "${HOME}/Library/Script\ Libraries/com.lifepillar"
  ASUNIT_TEXT: "ASUnit.applescript"
  DOC_DIR: "./doc"
  DOC_IMAGES_DIR: "./doc/images"
  DOC_STYLES_DIR: "./doc/styles"
  GFM_STYLESHEET: "github-markdown.css"
  HEADERDOC_LOG: "HeaderDoc.log"
  LIB_PREFS_DIR: "${HOME}/Library/Preferences"
  LIB_SCRIPT_LIBS_DIR: "${HOME}/Library/Script\ Libraries"
  OLD_README_HTML: "OldManual.html"
  OLD_README_MD: "OldManual.md"
  README_HTML: "README.html"
  README_MD: "README.md"
  README_STYLESHEET: "readme.css"
  VAR_DIR: "./var"
  VAR_LOG_DIR: "./var/log"

## Default Values
defaults:
  run:
    shell: bash

## Workflow runs are made up of one or more jobs that can either
## run sequentially or in parallel
jobs:
  env-debug:
    name: Debug Environment
    runs-on: macos-latest
    steps:
      - name: Environment
        run: |
          env | sort
      - name: Round 2
        env:
          SUPER_SECRET: ${{ secrets.SuperSecret }}
          FUBAR: true
        run: |
          env | sort
      - name: Round 3 - Removed?
        run: |
          env | ( grep FUBAR || echo "Clean" )

  machine_details:
    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    if: false
    steps:
      - name: Display Machine Details
        uses: plroebuck/machinedetails-action@v0.2.3-alpha

  orig_machine_details:
    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    if: false
    steps:
      - name: MachineDetails
        id: vars
        run: |
          ## Basic system information retrieved, first 4 lines deleted, any blank lines,
          ## left-whitespace trimmed, then result copied to clipboard
          system_profiler SPHardwareDataType | sed '1,4d' | sed '/./!d' | sed 's/^[ \t]*//' | head -n 10 | pbcopy
          #pbpaste    ## Uncomment to see the parsed material
          ## Parse each invidual detail
          modelname="$( pbpaste | awk -F':' '/Model Name/ { print substr($2, 2) }' )"
          ncores="$( pbpaste | awk -F':' '/Total Number of Cores/ { print sprintf("%d", $2) }' )"
          memory="$( pbpaste | awk -F':' '/Memory/ { print substr($2, 2) }' )"
          arch="$( uname -p )"
          ## Naturally, some are different between architectures
          if [[ "${arch}" == "i386" ]]; then
            chip="Intel Core"
            cpu="$( pbpaste | awk -F':' '/Processor Name/ { print substr($2, 2) }' )"
            cpuspeed="$( pbpaste | awk -F':' '/Processor Speed/ { print substr($2, 2) }' )"
            ncpus="$( pbpaste | awk -F':' '/Number of Processors/ { print sprintf("%d", $2) }' )"
          elif [[ "${arch}" == "arm" ]]; then
            chip="Apple M1 Virtual"
            chip="$( pbpaste | awk -F':' '/Chip/ { print substr($2, 2) }' )"
            cpu="N/A"
            cpuspeed="N/A"
            ncpus="N/A"
            rosetta2="$( [[ sysctl -in sysctl.proc_translated == '1' ]] && echo "active" || echo "inactive" )"
          fi
          ## Now export all the hardware-related variables
          echo "modelname=$( echo ${modelname} )" >> $GITHUB_OUTPUT
          echo "chip=$( echo ${chip} )" >> $GITHUB_OUTPUT
          echo "cpu=$( echo ${cpu} )" >> $GITHUB_OUTPUT
          echo "cpuspeed=$( echo ${cpuspeed} )" >> $GITHUB_OUTPUT
          echo "ncpus=$( echo ${ncpus} )" >> $GITHUB_OUTPUT
          echo "ncores=$( echo ${ncores} )" >> $GITHUB_OUTPUT
          echo "arch=$( uname -p )" >> $GITHUB_OUTPUT
          echo "isa=$( uname -m )" >> $GITHUB_OUTPUT
          echo "memory=$( echo ${memory} )" >> $GITHUB_OUTPUT
          echo "rosetta2=$( echo ${rosetta2} )" >> $GITHUB_OUTPUT
          ## Now export all the software-related variables
          echo "prodname=$( sw_vers -productName )" >> $GITHUB_OUTPUT
          echo "prodvers=$( sw_vers -productVersion )" >> $GITHUB_OUTPUT
          echo "build=$( sw_vers -buildVersion )" >> $GITHUB_OUTPUT
          echo "os=$( uname -sr )" >> $GITHUB_OUTPUT
          echo "applescript=$( osascript -e 'version of AppleScript' )" >> $GITHUB_OUTPUT

      - name: Display Hardware Information
        run: |
          echo "::group::Hardware Info"
          ## Now display everything hardware-related from the "MachineDetails" step
          arch="${{ steps.vars.outputs.arch }}"
          width=18
          printf "%-${width}s %s\n"  "ModelName:"       "${{ steps.vars.outputs.modelname }}"
          if [[ "${arch}" == "i386" ]]; then
            printf "%-${width}s %s\n"  "Chip:"           "${{ steps.vars.outputs.chip }}"
            printf "%-${width}s %s\n"  "CPU:"            "${{ steps.vars.outputs.cpu }}"
            printf "%-${width}s %s\n"  "Architecture:"    "${{ steps.vars.outputs.arch }}"
            printf "%-${width}s %s\n"  "InstructionSet:"  "${{ steps.vars.outputs.isa }}"
            printf "%-${width}s %s\n"  "ProcessorSpeed:"  "${{ steps.vars.outputs.cpuspeed}}"
            printf "%-${width}s %s\n"  "#CPUs:"           "${{ steps.vars.outputs.ncpus}}"
          elif [[ "${arch}" == "arm" ]]; then
            printf "%-${width}s %s\n"  "Chip:"           "${{ steps.vars.outputs.chip }}"
            printf "%-${width}s %s\n"  "Architecture:"    "${{ steps.vars.outputs.arch }}"
            printf "%-${width}s %s\n"  "InstructionSet:"  "${{ steps.vars.outputs.isa }}"
            printf "%${width}s %s\n"   "Rosetta2:"        "${{ steps.vars.outputs.rosetta2 }}"
          fi
          printf "%-${width}s %s\n"  "#Cores:"          "${{ steps.vars.outputs.ncores}}"
          printf "%-${width}s %s\n"  "Memory:"          "${{ steps.vars.outputs.memory }}"
          echo "::endgroup::"
          
      - name: Display Software Information
        run: |
          echo "::group::Software Info"
          ## Now display everything software-related from the "MachineDetails" step
          width=18
          printf "%-${width}s %s\n"  "ProductName:"     "${{ steps.vars.outputs.prodname }}"
          printf "%-${width}s %s\n"  "ProductVersion:"  "${{ steps.vars.outputs.prodvers }}"
          printf "%-${width}s %s\n"  "Build:"           "${{ steps.vars.outputs.build }}"
          printf "%-${width}s %s\n"  "OperatingSystem:" "${{ steps.vars.outputs.os }}"
          printf "%-${width}s %s\n"  "AppleScript:"     "${{ steps.vars.outputs.applescript }}"
          echo "::endgroup::"

      - name: Display Environment
        run: |
          echo "::group::Environment"
          ## Display the environment variables
          env | sort | sed 's/^/  /'
          echo "::endgroup::"

  just_a_job_to_do:
    strategy:
      matrix:
        os: [macos-14]
    #    os: [macos-13, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Create ApplesScript User Domain Script Library Directory
        run: |
          echo "::group::Create ApplesScript user domain script library directory"
          mkdir -p "${{ env.LIB_SCRIPT_LIBS_DIR }}"
          echo "::endgroup::"

      - name: Create ASUnit Library Directory
        run: |
          echo "::group::Create ASUnit library directory"
          mkdir -p "${{ env.ASUNIT_LIB_DIR }}"
          echo "::endgroup::"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Display the Checked-out Directory's Contents
        run: |
          ## Display The Directory Contents
          echo "::group::CWD ($GITHUB_WORKSPACE)"
          pwd
          ls -al | sed 's/^/  /'
          echo "::endgroup::"

      - name: Build Log Directory
        run: |
          echo "::group::Building log directory"
          mkdir -p "${{ env.VAR_LOG_DIR }}"
          cd "${{ env.VAR_DIR }}"
          pwd
          ls -al | sed 's/^/  /'      
          echo "::endgroup::"

      - name: Build ASUnit Library
        env:
          ASUNIT_BNDL: "ASUnit.scptd"
          ASUNIT_TEXT: "ASUnit.applescript"
        run: |
          echo "::group::Compiling ASUnit"
          result=$( osacompile -o $ASUNIT_BNDL -x $ASUNIT_TEXT )
          if [[ $? -ne 0 ]]; then
            echo "::error file=$ASUNIT_TEXT, title=FUBAR::${result}"
          fi
          pwd
          ls -al | sed 's/^/  /'
          echo "::endgroup::"

      - name: Install ASUnit Library
        env:
          ASUNIT_BNDL: "ASUnit.scptd"
        run: |
          echo "::group::Installing ASUnit"
          pwd
          if ! mv $ASUNIT_BNDL "${{ env.ASUNIT_LIB_DIR }}"; then
            echo "::error file=$ASUNIT_BNDL, title=FUBAR::moving library failed"
          fi
          cd "${{ env.ASUNIT_LIB_DIR }}"
          pwd
          ls -al | sed 's/^/  /'
          echo "::endgroup::"

      - name: Test ASUnit framework
        env:
          UNIT_TEST: "Test\ ASUnit.applescript"
        working-directory: test
        run: |
          echo "::group::Testing ASUnit framework with test program"
          echo "CWD: $( pwd )"
          result=$( osascript "${UNIT_TEST}" )
          if [[ $? -ne 0 ]]; then
            echo "::error file=${UNIT_TEST}, title=FUBAR::${result}"
          fi
          echo "::endgroup::"

      - name: Create ASUnit HTML Documentation Directories
        run: |
          is_a_directory() {
            local dir="$1"
            [[ -d "${dir}" ]]
          }
          echo "::group::Creating HTML directory structures"
          if ! is_a_directory "${{ env.DOC_DIR }}"; then
            mkdir -p "${{ env.DOC_DIR }}"
          fi
          if ! is_a_directory "${{ env.DOC_IMAGES_DIR }}"; then
            mkdir -p "${{ env.DOC_IMAGES_DIR }}"
          fi
          if ! is_a_directory "${{ env.DOC_STYLES_DIR }}"; then
            mkdir -p "${{ env.DOC_STYLES_DIR }}"
          fi
          echo "::endgroup::"
  
      - name: Create GFM-like Markdown Stylesheet
        env:
          GFM_STYLESHEET_URL: https://gist.githubusercontent.com/fergiemcdowall/9ecbea41f67465b5cfcd3560508eb100/raw/4e79df633dbf163c3543be460f30460ebd5c5b88/github-markdown.css
        run: |
          echo "::group::Downloading source stylesheet"
          declare -ir CURLE_OK=0
          css_markup="$( curl --silent $GFM_STYLESHEET_URL )"
          rc=$?
          if [[ ${rc} -ne ${CURLE_OK} ]]; then
            echo "::error file=${{ env.GFM_STYLESHEET }}, title=FUBAR::failed to download - curl (${rc})"
            exit 1
          fi
          echo "::endgroup::"
          echo "::group::Creating GFM-like Markdown stylesheet"
          stylesheet="${{ env.DOC_STYLES_DIR }}/${{ env.GFM_STYLESHEET }}"
          stylesheet_write_header() {
            local filename="$1"
            printf '/***\n'                          >> ${stylesheet}
            printf ' *** %s\n' "${filename}"         >> ${stylesheet}
            printf ' ***/\n\n'                       >> ${stylesheet}
          }
          stylesheet_write_header "${{ env.GFM_STYLESHEET }}"
          printf '%s\n' "${css_markup}"              >> "${stylesheet}"
          echo "::endgroup::"

      - name: Create ASUnit README Stylesheet
        run: |
          echo "::group::Creating ASUnit README stylesheet"
          stylesheet="${{ env.DOC_STYLES_DIR }}/${{ env.README_STYLESHEET }}"
          stylesheet_write_header() {
            local filename="$1"
            printf '/***\n'                          >> ${stylesheet}
            printf ' *** %s\n' "${filename}"         >> ${stylesheet}
            printf ' ***/\n\n'                       >> ${stylesheet}
          }
          stylesheet_write_center_heading_elem() {
            printf '#title-block-header {\n'         >> "${stylesheet}"
            printf '  text-align: center;\n'         >> "${stylesheet}"
            printf '}\n\n'                           >> "${stylesheet}"
          }
          stylesheet_write_header "${{ env.README_STYLESHEET }}"
          stylesheet_write_center_heading_elem
          echo "::endgroup::"

      - name: Symlink PNG Image, If Needed
        run: |
          is_a_symlink_file() {
            local file="$1"
            [[ -h "${file}" ]]
          }
          echo "::group::Symlink PNG image, if needed"
          ## :TODO: symlink name alias should already exist but doesn't
          cd "${{ env.ASSETS_DIR }}"
          png_logo="asunit_logo.png"
          if ! is_a_symlink_file ${png_logo}; then
            png_logo_dims="asunit_logo-208x64.png"
            ln -s ${png_logo_dims} ${png_logo}
          fi
          echo "::endgroup::"

      - name: Create SVG Image
        run: |
          echo "::group::Create SVG image"
          cd "../${{ env.DOC_IMAGES_DIR }}"
          ## :TODO: this is obviously wrong but achieves the goal short-term
          ## as documentation will be regenerated constantly, binary image less appealing for repository storage
          png_logo="asunit_logo.png"
          png_logo_rel="../../${{ env.ASSETS_DIR }}/${png_logo}"
          svg_logo="asunit_logo.svg"
          ln -s "${png_logo_rel}" ${svg_logo}
          echo "::endgroup::"

      - name: Save values for use in later steps
        id: vars
        run: |
          echo "::group::Setting variables"
          abs_doc_dir="$( cd ${{ env.DOC_DIR }}; pwd )"
          abs_api_doc_dir="$abs_doc_dir/api/"    # mirror API_DOC_DIR
          abs_var_log_dir="${HOME}/var/log/"
          abs_readme_html="$abs_doc_dir/${{ env.README_HTML }}"
          abs_readme_pdf="$abs_doc_dir/${{ env.README_PDF }}"
          abs_old_readme_html="$abs_doc_dir/${{ env.OLD_README_HTML }}"
          abs_var_log_dir="$( cd ${{ env.VAR_LOG_DIR }}; pwd )"
          logfile="${abs_var_log_dir}/${{ env.HEADERDOC_LOG }}"
          readme_when_off="$( git log -1 --pretty="format:%ci" README.md | sed -e 's/ /T/' -e 's/ //' )"
          orig_when_off="$( git log -1 --pretty="format:%ci" OldManual.md | sed -e 's/ /T/' -e 's/ //' )"
          readme_when="$( date -j -f "%FT%T%z" $readme_when_off +"%FT%RZ" )"
          orig_when="$( date -j -f "%FT%T%z" $orig_when_off +"%FT%RZ" )"
          echo "::endgroup::"
          #---
          echo "::group::Saving values to GITHUB_OUTPUT"
          echo "abs_doc_dir=$( echo $abs_doc_dir )" >> $GITHUB_OUTPUT
          echo "abs_api_doc_dir=$( echo $abs_api_doc_dir )" >> $GITHUB_OUTPUT
          echo "abs_readme_html=$( echo $abs_readme_html )" >> $GITHUB_OUTPUT
          echo "abs_old_readme_html=$( echo $abs_old_readme_html )" >> $GITHUB_OUTPUT
          echo "abs_var_log_dir=$( echo $abs_var_log_dir )" >> $GITHUB_OUTPUT
          echo "logfile=$( echo $logfile )" >> $GITHUB_OUTPUT
          echo "readme_when=$( echo $readme_when )" >> $GITHUB_OUTPUT
          echo "orig_when=$( echo $orig_when )" >> $GITHUB_OUTPUT
          echo "::endgroup::"
       
      - name: Install Pandoc
        uses: pandoc/actions/setup@v1
        with:
          version: 2.19

      - name: Convert README.md using Pandoc
        env:
          README_HTML: ${{ steps.vars.outputs.abs_readme_html }}
          REL_GFM_STYLESHEET: styles/${{ env.GFM_STYLESHEET }}
          REL_README_STYLESHEET: styles/${{ env.README_STYLESHEET }}
        run: >-
          pandoc
          --from gfm
          --to html5
          --standalone
          --columns=80
          --variable lang="en-US"
          --metadata title="User Guide"
          --metadata description="AppleScript Testing Framework"
          --metadata date="${{ steps.vars.outputs.readme_when }}"
          --request-header="X-Content-Type-Options: nosniff"
          --highlight-style="tango"
          --css="$REL_GFM_STYLESHEET"
          --css="$REL_README_STYLESHEET"
          --output=$README_HTML
          ${{ env.README_MD }}

      - name: Convert OldManual.md using Pandoc
        env:
          ORIG_README_HTML: ${{ steps.vars.outputs.abs_old_readme_html }}
          REL_GFM_STYLESHEET: styles/${{ env.GFM_STYLESHEET }}
        run: >-
          pandoc
          --from gfm
          --to html5
          --standalone 
          --columns=80
          --variable lang="en-US"
          --metadata title="Original User Guide"
          --metadata description="AppleScript Testing Framework"
          --metadata date="${{ steps.vars.outputs.orig_when }}"
          --request-header="X-Content-Type-Options: nosniff"
          --highlight-style="tango"
          --css="$REL_GFM_STYLESHEET"
          --output=$ORIG_README_HTML
          ${{ env.OLD_README_MD }}
  
      - name: Inspect converted documentation
        env:
          ORIG_README_HTML: ${{ steps.vars.outputs.abs_old_readme_html }}
          README_HTML: ${{ steps.vars.outputs.abs_readme_html }}
        run: |
          echo "::group::Inspecting converted markdown documentation"
          is_an_existing_file() {
            local file="$1"
            [[ -f "${file}" ]]
          }
          is_a_nonempty_file() {
            local file="$1"
            [[ -s "${file}" ]]
          }
          pwd
          ls -al
          echo "----"
          cd ${{ steps.vars.outputs.abs_doc_dir }}
          pwd
          ls -al
          ## Say something if README HTML files has no contents
          if ! is_a_nonempty_file $README_HTML; then
            if ! is_an_existing_file $README_HTML; then
              echo "::error file=$README_HTML, title=FUBAR::file does not exist"
            else
              echo "::error file=$README_HTML, title=FUBAR::zero length file"
            fi
          fi
          ## Say something if OLDREADME HTML files has no contents
          if ! is_a_nonempty_file $ORIG_README_HTML; then
            if ! is_an_existing_file $ORIG_README_HTML; then
              echo "::error file=$ORIG_README_HTML, title=FUBAR::file does not exist"
            else
              echo "::error file=$ORIG_README_HTML, title=FUBAR::zero length file"
            fi
          fi
          echo "::endgroup::"

      - name: Patch HTML Documentation
        run: |
          readme="${{ env.DOC_DIR }}/${{ env.README_HTML }}"
          readme_pandoc="${TMPDIR}/${{ env.README_HTML }}"
          png_logo_dims="asunit_logo-208x64.png"
          mv ${readme} ${readme_pandoc}
          sed -e 's^./assets/asunit_logo-208x64.png^../images/asunit_log.svg^' ${readme_pandoc} > ${readme}
          h1_center="\n#title-block-header {\n  text-align: center;\n}\n"
          echo "${h1_center}\n" >> "${{ env.DOC_STYLES_DIR }}"/${{ env.STYLESHEET }}
          unset h1_center
          mv ${readme_pandoc} ${readme}

      - name: Create HeaderDoc configuration file
        run: |
          gfm_stylesheet="${{ env.DOC_STYLES_DIR }}/${{ env.GFM_STYLESHEET }}"
          readme_stylesheet="${{ env.DOC_STYLES_DIR }}/${{ env.README_STYLESHEET }}"
           conffilename="headerDoc2HTML.config"
          conffile="${{ env.LIB_PREFS_DIR }}/com.apple.${conffilename}"
          conffile_write_header() {
            local file_desc="$1"
            printf "###\n### %s\n###\n\n" "${file_desc}" >> ${conffile}
          }
          conffile_write_conffile_setting() {
            local setting="$1"
            local value="$2"
            printf "%s => %s\n" "${setting}" "${value}" >> ${conffile}
          }
          conffile_write_header "HeaderDoc configuration file"
          conffile_write_setting "copyrightOwner" "lifepillar"
          conffile_write_setting "apiUIDPrefix" "asunit"
          conffile_write_setting "dateFormat" "%F"
          conffile_write_setting "externalStyleSheets" "REPARENT/${gfm_stylesheet}" "REPARENT/${readme_stylesheet}"
          conffile_write_setting "externalTOCStyleSheets" "REPARENT/${gfm_stylesheet}"
          ## :TODO: Needs more

      - name: Generate API documentation
        env:
          ASUNIT_TEXT: "ASUnit.applescript"
        run: |
          is_a_directory() {
            local dir="$1"
            [[ -d "${dir}" ]]
          }
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          if ! is_a_directory "${api_doc_dir}"; then
            mkdir -p "${api_doc_dir}"
          fi
          pwd
          ls -al
          echo "::group::Converting AppleScript file to API documentation"
          ## Log conversion issues, if necessary
          logfile="${{ steps.vars.outputs.logfile }}"
          logfile_write_header() {
            local file_desc="$1"
            printf "###\n### %s\n###\n\n" "${file_desc}" >> ${logfile}
          }
          logfile_write_cmd_header() {
            local cmd=${1}
            printf '#%.0s' {1..78}   >> ${logfile}
            printf "\n"              >> ${logfile}
            printf "## $ ${cmd}\n"   >> ${logfile}
            printf '#%.0s' {1..78}   >> ${logfile}
            printf "\n"              >> ${logfile}
          }
          logfile_write_header "CREATE_API_DOC_LOG"
          logfile_write_cmd_header "headerdoc2html -q -o ${api_doc_dir} $ASUNIT_TEXT"
          if ! headerdoc2html -q -o ${api_doc_dir} $ASUNIT_TEXT 2>&1 | tee -a ${logfile}; then
            echo "::error file=$ASUNIT_TEXT, title=FUBAR::problem generating documentation from source comments"
          fi
          printf "\n\n\n\n"                                                        >> ${logfile}
          # :NOTE: Temporary to see what it looks like before assembly
          logfile_write_cmd_header "gatherheaderdoc ${api_doc_dir}"
          if ! gatherheaderdoc ${api_doc_dir} 2>&1 | tee -a ${logfile}; then
            echo "::error file=${api_doc_dir}, title=FUBAR::problem processing headerdoc output"
          fi
          printf "\n\n"                                                            >> ${logfile}
          echo "::endgroup::"

      - name: Reparent stylesheet href relative paths
        if: false
        run: |
          # Reparent all generated HTML with proper relative paths to stylesheet

      - name: Prettify Documentation
        if: false
        run: |
          (cd ~; npm install prettier)
          find doc -name "*.html" -exec npx prettier --write {} \;

      - name: List Documentation Files
        run: |
          doc_dir="${{ steps.vars.outputs.abs_doc_dir }}"
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          projname="ASUnit"
          proglang="applescript"
          impl_api_dir="${api_doc_dir}/${projname}_${proglang}"
          cd ${doc_dir}
          pwd
          ls -al
          cd api
          pwd
          ls -al
          cd ${impl_api_dir}
          pwd
          ls -al

      - name: Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: "documentation-${{ matrix.os }}"
          path: |
            ${{ env.ASSETS_DIR }}
            ${{ env.DOC_DIR }}
            ${{ env.VAR_DIR }}
          if-no-files-found: error
          retention-days: 0
          compression-level: 9
          overwrite: true
          
      - name: Where did it go
        run: |
          doc_dir="${{ steps.vars.outputs.abs_doc_dir }}"
          cd ${doc_dir} 
          pwd
          ls -al "${doc_dir}"
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          cd ${api_doc_dir} 
          pwd
          ls -al "${api_doc_dir}"
          echo  "inside api dir"
          find ${api_doc_dir} -name "*" -print
          var_dir="${{ env.VAR_DIR }}"
          cd ${var_dir}
          pwd
          ls -al
          var_log_dir="${{ steps.vars.outputs.abs_var_log_dir }}"
          cd ${var_log_dir}
          pwd
          ls -al
          artifact_file="${doc_dir}/documentation-${{ matrix.runs-on }}"
          echo "::notice file=${artifact_file}. title=DOWNLOAD ME::"

