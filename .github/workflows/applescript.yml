###
### ASUnit Workflow
###

name: ASUnit_CI
##author: 'plroebuck'
##description: 'Handles continuous integration for ASUnit, the AppleScript test framework.'

## Controls when the workflow will run
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  ## Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

## Global environment
env:
  API_DOC_DIR: "./doc/api"
  ARTIFACT_DIR: "${GITHUB_WORKSPACE}/doc/"
  ASUNIT_BNDL: "ASUnit.scptd"
  ASUNIT_LIB_DIR: "${HOME}/Library/Script\ Libraries/com.lifepillar"
  ASUNIT_TEXT: "ASUnit.applescript"
  DOC_DIR: "./doc"
  OLD_README_HTML: "OldManual.html"
  OLD_README_MD: "OldManual.md"
  README_HTML: "README.html"
  README_MD: "README.md"
  UNIT_TEST: "Test\ ASUnit.applescript"

## Default Values
defaults:
  run:
    shell: bash

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  machine_details:
    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    if: false
    steps:
      - name: MachineDetails
        id: vars
        run: |
          ## Basic system information retrieved, first 4 lines deleted, any blank lines,
          ## left-whitespace trimmed, then result copied to clipboard
          system_profiler SPHardwareDataType | sed '1,4d' | sed '/./!d' | sed 's/^[ \t]*//' | head -n 10 | pbcopy
          #pbpaste    ## Uncomment to see the parsed material
          ## Parse each invidual detail
          modelname="$( pbpaste | awk -F':' '/Model Name/ { print substr($2, 2) }' )"
          ncores="$( pbpaste | awk -F':' '/Total Number of Cores/ { print sprintf("%d", $2) }' )"
          memory="$( pbpaste | awk -F':' '/Memory/ { print substr($2, 2) }' )"
          arch="$( uname -p )"
          ## Naturally, some are different between architectures
          if [[ "${arch}" == "i386" ]]; then
            chip="Intel Core"
            cpu="$( pbpaste | awk -F':' '/Processor Name/ { print substr($2, 2) }' )"
            cpuspeed="$( pbpaste | awk -F':' '/Processor Speed/ { print substr($2, 2) }' )"
            ncpus="$( pbpaste | awk -F':' '/Number of Processors/ { print sprintf("%d", $2) }' )"
          elif [[ "${arch}" == "arm" ]]; then
            chip="Apple M1 Virtual"
            chip="$( pbpaste | awk -F':' '/Chip/ { print substr($2, 2) }' )"
            cpu="N/A"
            cpuspeed="N/A"
            ncpus="N/A"
          fi
          ## Now export all the hardware-related variables
          echo "modelname=$( echo ${modelname} )" >> $GITHUB_OUTPUT
          echo "chip=$( echo ${chip} )" >> $GITHUB_OUTPUT
          echo "cpu=$( echo ${cpu} )" >> $GITHUB_OUTPUT
          echo "cpuspeed=$( echo ${cpuspeed} )" >> $GITHUB_OUTPUT
          echo "ncpus=$( echo ${ncpus} )" >> $GITHUB_OUTPUT
          echo "ncores=$( echo ${ncores} )" >> $GITHUB_OUTPUT
          echo "arch=$( uname -p )" >> $GITHUB_OUTPUT
          echo "isa=$( uname -m )" >> $GITHUB_OUTPUT
          echo "memory=$( echo ${memory} )" >> $GITHUB_OUTPUT
          ## Now export all the software-related variables
          echo "prodname=$( sw_vers -productName )" >> $GITHUB_OUTPUT
          echo "prodvers=$( sw_vers -productVersion )" >> $GITHUB_OUTPUT
          echo "build=$( sw_vers -buildVersion )" >> $GITHUB_OUTPUT
          echo "os=$( uname -sr )" >> $GITHUB_OUTPUT
          echo "applescript=$( osascript -e 'version of AppleScript' )" >> $GITHUB_OUTPUT

      - name: Display hardware information
        run: |
          echo "::group::Hardware Info"
          ## Now display everything hardware-related from the "MachineDetails" step
          arch="${{ steps.vars.outputs.arch }}"
          width=18
          printf "%-${width}s %s\n"  "ModelName:"       "${{ steps.vars.outputs.modelname }}"
          if [[ "${arch}" == "i386" ]]; then
            printf "%-${width}s %s\n"  "Chip:"           "${{ steps.vars.outputs.chip }}"
            printf "%-${width}s %s\n"  "CPU:"            "${{ steps.vars.outputs.cpu }}"
            printf "%-${width}s %s\n"  "Architecture:"    "${{ steps.vars.outputs.arch }}"
            printf "%-${width}s %s\n"  "InstructionSet:"  "${{ steps.vars.outputs.isa }}"
            printf "%-${width}s %s\n"  "ProcessorSpeed:"  "${{ steps.vars.outputs.cpuspeed}}"
            printf "%-${width}s %s\n"  "#CPUs:"           "${{ steps.vars.outputs.ncpus}}"
          elif [[ "${arch}" == "arm" ]]; then
            printf "%-${width}s %s\n"  "Chip:"           "${{ steps.vars.outputs.chip }}"
            printf "%-${width}s %s\n"  "Architecture:"    "${{ steps.vars.outputs.arch }}"
            printf "%-${width}s %s\n"  "InstructionSet:"  "${{ steps.vars.outputs.isa }}"
          fi
          printf "%-${width}s %s\n"  "#Cores:"          "${{ steps.vars.outputs.ncores}}"
          printf "%-${width}s %s\n"  "Memory:"          "${{ steps.vars.outputs.memory }}"
          echo "::endgroup::"
          
      - name: Display software information
        run: |
          echo "::group::Software Info"
          ## Now display everything software-related from the "MachineDetails" step
          width=18
          printf "%-${width}s %s\n"  "ProductName:"     "${{ steps.vars.outputs.prodname }}"
          printf "%-${width}s %s\n"  "ProductVersion:"  "${{ steps.vars.outputs.prodvers }}"
          printf "%-${width}s %s\n"  "Build:"           "${{ steps.vars.outputs.build }}"
          printf "%-${width}s %s\n"  "OperatingSystem:" "${{ steps.vars.outputs.os }}"
          printf "%-${width}s %s\n"  "AppleScript:"     "${{ steps.vars.outputs.applescript }}"
          echo "::endgroup::"

      - name: Display environment
        run: |
          echo "::group::Environment"
          ## Display the environment variables
          env | sort | sed 's/^/  /'
          echo "::endgroup::"

  just_a_job_to_do:
    strategy:
      matrix:
        os: [macos-14]
    #    os: [macos-13, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Create ASUnit library directory
        run: |
          echo "::group::Create ASUnit library directory"
          mkdir -p "${{env.ASUNIT_LIB_DIR}}"
          ls -al "${{env.ASUNIT_LIB_DIR}}"
          echo "::endgroup::"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Display the checked-out directory's contents
        run: |
          ## Display the directory contents
          echo "::group::CWD ($GITHUB_WORKSPACE)"
          pwd
          ls -al | sed 's/^/  /'
          echo "::endgroup::"
    
      - name: Build ASUnit library
        run: |
          echo "::group::Compiling ASUnit"
          pwd
          result=$(osacompile -o ${{env.ASUNIT_BNDL}} -x ${{env.ASUNIT_TEXT}})
          if [[ $? -ne 0 ]]; then
            echo "::error file=${{env.ASUNIT_TEXT}}, title=FUBAR::${result}"
          fi
          ls -al | sed 's/^/  /'
          echo "::endgroup::"

      - name: Install ASUnit library
        run: |
          echo "::group::Installing ASUnit"
          pwd
          mv ${{env.ASUNIT_BNDL}} "${{env.ASUNIT_LIB_DIR}}"
          ls -al "${{env.ASUNIT_LIB_DIR}}"
          echo "::endgroup::"

      - name: Test ASUnit framework with test program
        working-directory: test
        run: |
          echo "::group::Testing ASUnit framework with test program"
          echo "CWD: $( pwd )"
          result=$(osascript "${{env.UNIT_TEST}}")
          if [[ $? -ne 0 ]]; then
            echo "::error file=${{env.UNIT_TEST}}, title=FUBAR::${result}"
          fi
          echo "::endgroup::"

      - name: Setup for creating documentation
        run: |
          if [[ ! -d "${{env.DOC_DIR}}" ]]; then
            mkdir -p "${{env.DOC_DIR}}"
          fi

      - name: Install Pandoc
        uses: pandoc/actions/setup@v1
        with:
          version: 2.19

      - name: Save absolute paths
        id: vars
        run: |
          abs_doc_dir="$( cd ${{ env.DOC_DIR }}; pwd )"
          abs_api_doc_dir="$abs_doc_dir/api/"    # mirror API_DOC_DIR
          abs_readme_html="$abs_doc_dir/${{ env.README_HTML }}"
          abs_old_readme_html="$abs_doc_dir/${{ env.OLD_README_HTML }}"
          #---
          echo "abs_doc_dir=$( echo $abs_doc_dir )" >> $GITHUB_OUTPUT
          echo "abs_api_doc_dir=$( echo $abs_api_doc_dir )" >> $GITHUB_OUTPUT
          echo "abs_readme_html=$( echo $abs_readme_html )" >> $GITHUB_OUTPUT
          echo "abs_old_readme_html=$( echo $abs_old_readme_html )" >> $GITHUB_OUTPUT

      - name: Convert markdown files to HTML
        run: |
          echo "::group::Converting markdown files to HTML for documentation"

      - name: Convert README.md using Pandoc
        run: >-
          pandoc
          --standalone
          --metadata title="ASUnit, the AppleScript testing framework"
          --metadata date="$( date -j +'%FT%TZ%Z%z' )"
          --output="${{ steps.vars.outputs.abs_readme_html }}"
          "${{env.README_MD}}"

      - name: Convert OldManual.md using Pandoc
        run: >-
          pandoc
          --standalone 
          --metadata title="ASUnit's original user guide"
          --metadata date="$( date -j +'%FT%TZ%Z%z' )"
          --output="${{ steps.vars.outputs.abs_old_readme_html }}"
          "${{env.OLD_README_MD}}"
  
      - name: Inspect original README results
        run: |
          pwd
          ls -al
          echo "----"
          cd ${{ steps.vars.outputs.abs_doc_dir }}
          pwd
          ls -al
          ## Say something if README HTML files has no contents
          readme_html="${{ steps.vars.outputs.abs_readme_html }}"
          if [[ -s "${readme_html}" ]]; then
            echo "::error file=${readme_html}, title=FUBAR::zero length file"
          else
            head -n 20 "${readme_html}"    # prove it
          fi
          ## Say something if OLDREADME HTML files has no contents
          old_readme_html="${{ steps.vars.outputs.abs_old_readme_html }}"
          if [[ -s "${old_readme_html}" ]]; then
            echo "::error file="${old_readme_html}", title=FUBAR::zero length file"
          else
            head -n 20 "${old_readme_html}"    # prove it
          fi
          echo "::endgroup::"

      - name: Setup for creating API documentation
        run: |
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          if [[ ! -d "${api_doc_dir}" ]]; then
            mkdir -p "${api_doc_dir}"
          fi
          pwd
          ls -al

      - name: Generate API documentation
        run: |
          pwd
          ls -al
          echo "::group::Converting AppleScript file to API documentation"
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          ## Log conversion issues, if necessary
          logfile="${api_doc_dir}/create_api_doc.log"
          touch ${logfile}
          printf "###\n### CREATE_API_DOC_LOG\n###\n\n"                            >> ${logfile}
          printf "===============================================================" >> ${logfile}
          printf "$ headerdoc2html -q -o ${api_doc_dir} ${{ env.ASUNIT_TEXT }}"    >> ${logfile}
          printf "===============================================================" >> ${logfile}
          headerdoc2html_cmd="                                              \
            headerdoc2html -q -o ${api_doc_dir} ${{ env.ASUNIT_TEXT }} 2>&1 \
            | tee -a ${logfile}                                             \
          )"
          if ! $headerdoc2html_cmd; then
            echo "::error file=${{ env.ASUNIT_TEXT }}, title=FUBAR::problem extracting comments"
          fi
          printf "\n\n\n\n"                                                        >> ${logfile}
          printf "===============================================================" >> ${logfile}
          printf "$ gatherheaderdoc ${api_doc_dir}"                                >> ${logfile}
          printf "===============================================================" >> ${logfile}
          gatherheaderdoc_cmd="$(                                           \
            gatherheaderdoc ${api_doc_dir} 2>&1                             \
            | tee -a ${logfile}                                             \
          )"
          if ! gatherheaderdoc_cmd; then
            echo "::error file=${api_doc_dir}, title=FUBAR::problem gathering generated comments"
          fi
          printf "\n\n"                                                          >> ${logfile}
          echo "::endgroup::"

      - name: Life moves pretty fast
        run: |
          doc_dir="${{ steps.vars.outputs.abs_doc_dir }}"
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          pwd
          ls -al ${api_doc_dir}
          find ${api_doc_dir} -name "*" -print
          ls -al "${doc_dir}"

      - name: Upload Docummentation
        uses: actions/upload-artifact@v4
        with:
          name: "documentation-${{ matrix.runs-on }}"
          path: "${{ steps.vars.outputs.abs_doc_dir }}"
          retention-days: 5
          overwrite: true
          compression-level: 9
          
      - name: Where did it go
        run: |
          doc_dir="${{ steps.vars.outputs.abs_doc_dir }}"
          api_doc_dir="${{ steps.vars.outputs.abs_api_doc_dir }}"
          artifact_file="${doc_dir}/documentation-${{ matrix.runs-on }}"
          pwd
          ls -al "${doc_dir}"
          cd doc
          pwd
          ls -al ${api_doc_dir}
          find ${api_doc_dir} -name "*" -print
          echo "::notice file=${artifact_file}. title=DOWNLOAD ME::"

